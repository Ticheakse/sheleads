/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SheLeads {
  export type ProfessionalProfileStruct = { id: BigNumberish; content: string };

  export type ProfessionalProfileStructOutput = [
    id: bigint,
    content: string
  ] & { id: bigint; content: string };

  export type RecommendationStruct = { id: BigNumberish; content: string };

  export type RecommendationStructOutput = [id: bigint, content: string] & {
    id: bigint;
    content: string;
  };
}

export interface SheLeadsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProfessionalProfile"
      | "addRecomendation"
      | "getProfessionalProfile"
      | "getRecomendation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AddProfessionalProfile" | "AddRecomendation"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addProfessionalProfile",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRecomendation",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfessionalProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecomendation",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addProfessionalProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRecomendation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfessionalProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecomendation",
    data: BytesLike
  ): Result;
}

export namespace AddProfessionalProfileEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddRecomendationEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SheLeads extends BaseContract {
  connect(runner?: ContractRunner | null): SheLeads;
  waitForDeployment(): Promise<this>;

  interface: SheLeadsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProfessionalProfile: TypedContractMethod<
    [_content: string],
    [void],
    "nonpayable"
  >;

  addRecomendation: TypedContractMethod<
    [_professionalProfileId: BigNumberish, _content: string],
    [void],
    "nonpayable"
  >;

  getProfessionalProfile: TypedContractMethod<
    [],
    [SheLeads.ProfessionalProfileStructOutput],
    "view"
  >;

  getRecomendation: TypedContractMethod<
    [_professionalProfile: BigNumberish],
    [SheLeads.RecommendationStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProfessionalProfile"
  ): TypedContractMethod<[_content: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addRecomendation"
  ): TypedContractMethod<
    [_professionalProfileId: BigNumberish, _content: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProfessionalProfile"
  ): TypedContractMethod<
    [],
    [SheLeads.ProfessionalProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecomendation"
  ): TypedContractMethod<
    [_professionalProfile: BigNumberish],
    [SheLeads.RecommendationStructOutput],
    "view"
  >;

  getEvent(
    key: "AddProfessionalProfile"
  ): TypedContractEvent<
    AddProfessionalProfileEvent.InputTuple,
    AddProfessionalProfileEvent.OutputTuple,
    AddProfessionalProfileEvent.OutputObject
  >;
  getEvent(
    key: "AddRecomendation"
  ): TypedContractEvent<
    AddRecomendationEvent.InputTuple,
    AddRecomendationEvent.OutputTuple,
    AddRecomendationEvent.OutputObject
  >;

  filters: {
    "AddProfessionalProfile(address)": TypedContractEvent<
      AddProfessionalProfileEvent.InputTuple,
      AddProfessionalProfileEvent.OutputTuple,
      AddProfessionalProfileEvent.OutputObject
    >;
    AddProfessionalProfile: TypedContractEvent<
      AddProfessionalProfileEvent.InputTuple,
      AddProfessionalProfileEvent.OutputTuple,
      AddProfessionalProfileEvent.OutputObject
    >;

    "AddRecomendation(address)": TypedContractEvent<
      AddRecomendationEvent.InputTuple,
      AddRecomendationEvent.OutputTuple,
      AddRecomendationEvent.OutputObject
    >;
    AddRecomendation: TypedContractEvent<
      AddRecomendationEvent.InputTuple,
      AddRecomendationEvent.OutputTuple,
      AddRecomendationEvent.OutputObject
    >;
  };
}
