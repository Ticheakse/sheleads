/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SheLeads {
  export type ActionPlanStruct = {
    id: BigNumberish;
    content: string;
    createdAt: BigNumberish;
  };

  export type ActionPlanStructOutput = [
    id: bigint,
    content: string,
    createdAt: bigint
  ] & { id: bigint; content: string; createdAt: bigint };

  export type ProfessionalProfileStruct = {
    id: BigNumberish;
    content: string;
    createdAt: BigNumberish;
  };

  export type ProfessionalProfileStructOutput = [
    id: bigint,
    content: string,
    createdAt: bigint
  ] & { id: bigint; content: string; createdAt: bigint };

  export type RecommendationStruct = {
    id: BigNumberish;
    content: string;
    createdAt: BigNumberish;
  };

  export type RecommendationStructOutput = [
    id: bigint,
    content: string,
    createdAt: bigint
  ] & { id: bigint; content: string; createdAt: bigint };
}

export interface SheLeadsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "addActionPlan"
      | "addProfessionalProfile"
      | "addRecommendation"
      | "addRecommendationActionPlan"
      | "getActionPlan"
      | "getMyActionPlan"
      | "getProfessionalProfile"
      | "getRecommendation"
      | "getRecommendations"
      | "handleOracleFulfillment"
      | "owner"
      | "result"
      | "s_lastError"
      | "s_lastRequestId"
      | "s_lastResponse"
      | "sendRequest"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddActionPlan"
      | "AddProfessionalProfile"
      | "AddRecommendation"
      | "AddRecommendationActionPlan"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
      | "RequestFulfilled"
      | "RequestSent"
      | "Response"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addActionPlan",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addProfessionalProfile",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRecommendation",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRecommendationActionPlan",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionPlan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyActionPlan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProfessionalProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecommendation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecommendations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "result", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "s_lastError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_lastResponse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [BigNumberish, BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addActionPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProfessionalProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRecommendation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRecommendationActionPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyActionPlan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfessionalProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecommendation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecommendations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "result", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_lastError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_lastResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AddActionPlanEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddProfessionalProfileEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddRecommendationEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddRecommendationActionPlanEvent {
  export type InputTuple = [userAddress: AddressLike];
  export type OutputTuple = [userAddress: string];
  export interface OutputObject {
    userAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestFulfilledEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSentEvent {
  export type InputTuple = [id: BytesLike];
  export type OutputTuple = [id: string];
  export interface OutputObject {
    id: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResponseEvent {
  export type InputTuple = [
    requestId: BytesLike,
    result: string,
    response: BytesLike,
    err: BytesLike
  ];
  export type OutputTuple = [
    requestId: string,
    result: string,
    response: string,
    err: string
  ];
  export interface OutputObject {
    requestId: string;
    result: string;
    response: string;
    err: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SheLeads extends BaseContract {
  connect(runner?: ContractRunner | null): SheLeads;
  waitForDeployment(): Promise<this>;

  interface: SheLeadsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addActionPlan: TypedContractMethod<
    [_recommendationId: BigNumberish, _content: string],
    [void],
    "nonpayable"
  >;

  addProfessionalProfile: TypedContractMethod<
    [_content: string],
    [void],
    "nonpayable"
  >;

  addRecommendation: TypedContractMethod<
    [_professionalProfileId: BigNumberish, _content: string],
    [void],
    "nonpayable"
  >;

  addRecommendationActionPlan: TypedContractMethod<
    [
      _professionalProfileId: BigNumberish,
      _contentRecommendation: string,
      _contentActionPlan: string
    ],
    [void],
    "nonpayable"
  >;

  getActionPlan: TypedContractMethod<
    [_recommendationId: BigNumberish],
    [SheLeads.ActionPlanStructOutput],
    "view"
  >;

  getMyActionPlan: TypedContractMethod<
    [],
    [SheLeads.ActionPlanStructOutput],
    "view"
  >;

  getProfessionalProfile: TypedContractMethod<
    [],
    [SheLeads.ProfessionalProfileStructOutput],
    "view"
  >;

  getRecommendation: TypedContractMethod<
    [_professionalProfile: BigNumberish],
    [SheLeads.RecommendationStructOutput],
    "view"
  >;

  getRecommendations: TypedContractMethod<
    [],
    [SheLeads.RecommendationStructOutput[]],
    "view"
  >;

  handleOracleFulfillment: TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  result: TypedContractMethod<[], [string], "view">;

  s_lastError: TypedContractMethod<[], [string], "view">;

  s_lastRequestId: TypedContractMethod<[], [string], "view">;

  s_lastResponse: TypedContractMethod<[], [string], "view">;

  sendRequest: TypedContractMethod<
    [subscriptionId: BigNumberish, encryptedSecrets: BytesLike, args: string[]],
    [string],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addActionPlan"
  ): TypedContractMethod<
    [_recommendationId: BigNumberish, _content: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addProfessionalProfile"
  ): TypedContractMethod<[_content: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addRecommendation"
  ): TypedContractMethod<
    [_professionalProfileId: BigNumberish, _content: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addRecommendationActionPlan"
  ): TypedContractMethod<
    [
      _professionalProfileId: BigNumberish,
      _contentRecommendation: string,
      _contentActionPlan: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActionPlan"
  ): TypedContractMethod<
    [_recommendationId: BigNumberish],
    [SheLeads.ActionPlanStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyActionPlan"
  ): TypedContractMethod<[], [SheLeads.ActionPlanStructOutput], "view">;
  getFunction(
    nameOrSignature: "getProfessionalProfile"
  ): TypedContractMethod<
    [],
    [SheLeads.ProfessionalProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecommendation"
  ): TypedContractMethod<
    [_professionalProfile: BigNumberish],
    [SheLeads.RecommendationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecommendations"
  ): TypedContractMethod<[], [SheLeads.RecommendationStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "handleOracleFulfillment"
  ): TypedContractMethod<
    [requestId: BytesLike, response: BytesLike, err: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "result"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "s_lastError"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "s_lastRequestId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "s_lastResponse"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendRequest"
  ): TypedContractMethod<
    [subscriptionId: BigNumberish, encryptedSecrets: BytesLike, args: string[]],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AddActionPlan"
  ): TypedContractEvent<
    AddActionPlanEvent.InputTuple,
    AddActionPlanEvent.OutputTuple,
    AddActionPlanEvent.OutputObject
  >;
  getEvent(
    key: "AddProfessionalProfile"
  ): TypedContractEvent<
    AddProfessionalProfileEvent.InputTuple,
    AddProfessionalProfileEvent.OutputTuple,
    AddProfessionalProfileEvent.OutputObject
  >;
  getEvent(
    key: "AddRecommendation"
  ): TypedContractEvent<
    AddRecommendationEvent.InputTuple,
    AddRecommendationEvent.OutputTuple,
    AddRecommendationEvent.OutputObject
  >;
  getEvent(
    key: "AddRecommendationActionPlan"
  ): TypedContractEvent<
    AddRecommendationActionPlanEvent.InputTuple,
    AddRecommendationActionPlanEvent.OutputTuple,
    AddRecommendationActionPlanEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RequestFulfilled"
  ): TypedContractEvent<
    RequestFulfilledEvent.InputTuple,
    RequestFulfilledEvent.OutputTuple,
    RequestFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RequestSent"
  ): TypedContractEvent<
    RequestSentEvent.InputTuple,
    RequestSentEvent.OutputTuple,
    RequestSentEvent.OutputObject
  >;
  getEvent(
    key: "Response"
  ): TypedContractEvent<
    ResponseEvent.InputTuple,
    ResponseEvent.OutputTuple,
    ResponseEvent.OutputObject
  >;

  filters: {
    "AddActionPlan(address)": TypedContractEvent<
      AddActionPlanEvent.InputTuple,
      AddActionPlanEvent.OutputTuple,
      AddActionPlanEvent.OutputObject
    >;
    AddActionPlan: TypedContractEvent<
      AddActionPlanEvent.InputTuple,
      AddActionPlanEvent.OutputTuple,
      AddActionPlanEvent.OutputObject
    >;

    "AddProfessionalProfile(address)": TypedContractEvent<
      AddProfessionalProfileEvent.InputTuple,
      AddProfessionalProfileEvent.OutputTuple,
      AddProfessionalProfileEvent.OutputObject
    >;
    AddProfessionalProfile: TypedContractEvent<
      AddProfessionalProfileEvent.InputTuple,
      AddProfessionalProfileEvent.OutputTuple,
      AddProfessionalProfileEvent.OutputObject
    >;

    "AddRecommendation(address)": TypedContractEvent<
      AddRecommendationEvent.InputTuple,
      AddRecommendationEvent.OutputTuple,
      AddRecommendationEvent.OutputObject
    >;
    AddRecommendation: TypedContractEvent<
      AddRecommendationEvent.InputTuple,
      AddRecommendationEvent.OutputTuple,
      AddRecommendationEvent.OutputObject
    >;

    "AddRecommendationActionPlan(address)": TypedContractEvent<
      AddRecommendationActionPlanEvent.InputTuple,
      AddRecommendationActionPlanEvent.OutputTuple,
      AddRecommendationActionPlanEvent.OutputObject
    >;
    AddRecommendationActionPlan: TypedContractEvent<
      AddRecommendationActionPlanEvent.InputTuple,
      AddRecommendationActionPlanEvent.OutputTuple,
      AddRecommendationActionPlanEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RequestFulfilled(bytes32)": TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;
    RequestFulfilled: TypedContractEvent<
      RequestFulfilledEvent.InputTuple,
      RequestFulfilledEvent.OutputTuple,
      RequestFulfilledEvent.OutputObject
    >;

    "RequestSent(bytes32)": TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;
    RequestSent: TypedContractEvent<
      RequestSentEvent.InputTuple,
      RequestSentEvent.OutputTuple,
      RequestSentEvent.OutputObject
    >;

    "Response(bytes32,string,bytes,bytes)": TypedContractEvent<
      ResponseEvent.InputTuple,
      ResponseEvent.OutputTuple,
      ResponseEvent.OutputObject
    >;
    Response: TypedContractEvent<
      ResponseEvent.InputTuple,
      ResponseEvent.OutputTuple,
      ResponseEvent.OutputObject
    >;
  };
}
